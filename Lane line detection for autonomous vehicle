# import the libaries that are required
import cv2 as cv
import numpy as np

# applying the important filters that can help reduce noise in the video
def do_canny(frame):
    gray = cv.cvtColor(frame, cv.COLOR_RGB2GRAY)
    blur = cv.GaussianBlur(gray, (5, 5), 0)
    canny = cv.Canny(blur, 50, 150)
    return canny

# segementing a part of the video for more efficient and accurate extraction of the lane
def do_segment(frame):
    height = frame.shape[0]
    polygons = np.array([
        [(0, height), (800, height), (380, 290)]
    ])
    mask = np.zeros_like(frame)
    cv.fillPoly(mask, polygons, 255)
    segment = cv.bitwise_and(frame, mask)
    return segment

def calculate_lines(frame, lines):
    left = []
    right = []
    for line in lines:
        x1, y1, x2, y2 = line.reshape(4)
        parameters = np.polyfit((x1, x2), (y1, y2), 1)
        slope = parameters[0]
        y_intercept = parameters[1]
        if slope < 0:
            left.append((slope, y_intercept))
        else:
            right.append((slope, y_intercept))
    left_avg = np.average(left, axis=0)
    right_avg = np.average(right, axis=0)
    left_line = calculate_coordinates(frame, left_avg)
    right_line = calculate_coordinates(frame, right_avg)
    return np.array([left_line, right_line])

# defining the corrdinates for the frame to help in the detection of the lane
def calculate_coordinates(frame, parameters):
    slope, intercept = parameters[0], parameters[1]
    y1 = frame.shape[0]
    y2 = int(y1 - 150)
    x1 = int((y1 - intercept) / slope)
    x2 = int((y2 - intercept) / slope)
    return np.array([x1, y1, x2, y2])

# visualzing the lines that detect and draw on the video that is to be processed
def visualize_lines(frame, lines):
    lines_visualize = np.zeros_like(frame)
    if lines is not None:
        for line in lines:
            x1, y1, x2, y2 = map(int, line)
            cv.line(lines_visualize, (x1, y1), (x2, y2), (0, 255, 0), 5)
    return lines_visualize

# define the direction of the video
cap = cv.VideoCapture(r"C:\Users\example")

if not cap.isOpened():
    cap = cv.VideoCapture

# final output and impliementation of all the filters and segmentation into the video that is to be processed for lane detection.
while True:
    ret, frame = cap.read()
    
    if not ret:
        break
    
    canny = do_canny(frame)
    cv.imshow("canny", canny)
    
    segment = do_segment(canny)
    cv.imshow("segment", segment)
    hough = cv.HoughLinesP(segment, 2, np.pi / 180, 100, np.array([]), minLineLength=100, maxLineGap=50)
    
    lines = calculate_lines(frame, hough)
    lines_visualize = visualize_lines(frame, lines)
    
    output = cv.addWeighted(frame, 0.9, lines_visualize, 1, 1)
    cv.imshow("output", output)
    
    if cv.waitKey(2) & 0xFF == ord('q'):
        break

cap.release()
cv.destroyAllWindows()
